{"version":3,"sources":["components/FeedbackOption/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Counter/Counter.jsx","components/App/App.js","index.js"],"names":["FeedbackOptions","options","className","type","data-name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Counter","state","props","initialValue","all","positive","changeValue","event","field","target","dataset","name","setState","prevState","countPositiveFeedbackPercentage","toFixed","this","React","Component","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"+PASeA,EAPU,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OACvB,sBAAKC,UAAU,oBAAf,UACE,wBAAQC,KAAK,SAAUC,YAAU,OAAOC,QAASJ,EAAjD,kBACA,wBAAQE,KAAK,SAAUC,YAAU,UAAUC,QAASJ,EAApD,qBACA,wBAAQE,KAAK,SAAUC,YAAU,MAAMC,QAASJ,EAAhD,qBCeWK,EAnBI,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC5C,OAAa,IAATJ,GAAsB,IAARE,GAAyB,IAAZD,EACpB,kDAGP,gCACA,uBAAMN,UAAU,iBAAhB,mBAAyCK,KACzC,uBACA,uBAAML,UAAU,iBAAhB,sBAA4CM,KAC5C,uBACA,uBAAMN,UAAU,iBAAhB,kBAAwCO,KACxC,uBACA,uBAAMP,UAAU,iBAAhB,oBAA0CQ,KAC1C,uBACA,uBAAMR,UAAU,iBAAhB,gCAAsDS,EAAtD,WCPOC,EAPE,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACf,sBAAKZ,UAAU,oBAAf,UACE,6BAAKW,IACJC,MCCCC,E,4MAIJC,MAAQ,CACNT,KAAM,EAAKU,MAAMC,aACjBV,QAAS,EAAKS,MAAMC,aACpBT,IAAK,EAAKQ,MAAMC,aAChBC,IAAK,EAAKF,MAAMC,aAChBE,SAAU,EAAKH,MAAMC,c,EAGvBG,YAAc,SAACC,GACb,IAAMC,EAAQD,EAAME,OAAOC,QAAQC,KACjC,EAAKC,UAAS,SAACC,GAAD,gCACbL,EAAQK,EAAUL,GAAS,GADd,oBAETK,EAAUT,IAAM,GAFP,M,EAKlBU,gCAAkC,WAChC,OAA4B,IAApB,EAAKb,MAAMT,KAAe,EAAKS,MAAMT,KAAO,EAAKS,MAAMG,IAAO,IAAO,GAAGW,QAAQ,I,4CAE1F,WACE,IAAMV,EAAWW,KAAKF,kCADf,EAE6BE,KAAKf,MAAjCT,EAFD,EAECA,KAAMC,EAFP,EAEOA,QAASC,EAFhB,EAEgBA,IAAKU,EAFrB,EAEqBA,IAC5B,OACE,gCACE,cAAC,EAAD,CAASN,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBZ,QAAS8B,KAAKV,gBAEjC,cAAC,EAAD,CAASR,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,EACPR,mBAAoBS,a,GApCVY,IAAMC,WAAtBlB,EACGmB,aAAe,CACpBhB,aAAc,GA0CHH,QCtCAoB,EARH,WACV,OACE,8BACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9ae5b580.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FeedbackOptions  = ({options}) => (\r\n  <div className=\"Counter__controls\">\r\n    <button type=\"button\"  data-name=\"good\" onClick={options}>Good</button>\r\n    <button type=\"button\"  data-name=\"neutral\" onClick={options}>Neutral</button>\r\n    <button type=\"button\"  data-name=\"bad\" onClick={options}>Bad</button>\r\n  </div>\r\n);\r\nexport default FeedbackOptions ;\r\n\r\n","import React from 'react';\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage }) => {\r\n    if (good === 0 && bad === 0 && neutral === 0) {\r\n        return <p>No feedback given</p>;\r\n    }\r\n    return (\r\n        <div>\r\n        <span className=\"Counter__value\">Good: { good }</span>\r\n        <br/>\r\n        <span className=\"Counter__value\">Neutral: { neutral }</span>\r\n        <br/>\r\n        <span className=\"Counter__value\">Bad: { bad }</span>\r\n        <br/>\r\n        <span className=\"Counter__value\">Total: { total }</span>\r\n        <br/>\r\n        <span className=\"Counter__value\">Positive Feedback: { positivePercentage }%</span>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\n\r\nconst Section  = ({title, children}) => (\r\n  <div className=\"Counter__controls\">\r\n    <h1>{title}</h1>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Section ;","import React from 'react';\r\nimport './Counter.module.css';\r\nimport FeedbackOptions  from '../FeedbackOption/FeedbackOptions';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport Section from '../Section/Section';\r\n\r\nclass Counter extends React.Component {\r\n  static defaultProps = {\r\n    initialValue: 0,\r\n  };\r\n  state = {\r\n    good: this.props.initialValue,\r\n    neutral: this.props.initialValue,\r\n    bad: this.props.initialValue,\r\n    all: this.props.initialValue,\r\n    positive: this.props.initialValue,\r\n  }\r\n\r\n  changeValue = (event) => {\r\n    const field = event.target.dataset.name;\r\n      this.setState((prevState) => ({\r\n      [field]: prevState[field] + 1,\r\n      all: prevState.all + 1,\r\n    }));\r\n  }\r\n  countPositiveFeedbackPercentage = () => {\r\n    return (this.state.good !== 0 ? ((this.state.good / this.state.all) * 100) : 0).toFixed(2);\r\n  }\r\n  render() {\r\n    const positive = this.countPositiveFeedbackPercentage();\r\n    const { good, neutral, bad, all } = this.state;\r\n    return (\r\n      <div>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions options={this.changeValue} />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          <Statistics \r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={all}\r\n            positivePercentage={positive}\r\n          />\r\n        </Section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport Counter from '../Counter/Counter';\n\n\nconst App = () => {\n  return (\n    <div>\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import {StrictMode} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}